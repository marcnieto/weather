// Mocks generated by Mockito 5.4.4 from annotations
// in weather/test/screens/weather/weather_screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:weather/clients/open_meteo_api/open_meteo_api_client.dart'
    as _i6;
import 'package:weather/models/forecast/forecast.dart' as _i3;
import 'package:weather/models/location/location.dart' as _i2;
import 'package:weather/repositories/location/location_services_repository.dart'
    as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeLocation_0 extends _i1.SmartFake implements _i2.Location {
  _FakeLocation_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeForecast_1 extends _i1.SmartFake implements _i3.Forecast {
  _FakeForecast_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [LocationServicesRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocationServicesRepository extends _i1.Mock
    implements _i4.LocationServicesRepository {
  MockLocationServicesRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<bool> requestPermission() => (super.noSuchMethod(
        Invocation.method(
          #requestPermission,
          [],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<bool> locationServicesGranted() => (super.noSuchMethod(
        Invocation.method(
          #locationServicesGranted,
          [],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<_i2.Location> getCurrentLocation() => (super.noSuchMethod(
        Invocation.method(
          #getCurrentLocation,
          [],
        ),
        returnValue: _i5.Future<_i2.Location>.value(_FakeLocation_0(
          this,
          Invocation.method(
            #getCurrentLocation,
            [],
          ),
        )),
      ) as _i5.Future<_i2.Location>);
}

/// A class which mocks [OpenMeteoAPIClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockOpenMeteoAPIClient extends _i1.Mock
    implements _i6.OpenMeteoAPIClient {
  MockOpenMeteoAPIClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i3.Forecast> getForecast({
    required double? latitude,
    required double? longitude,
    String? temperatureUnit,
    String? windSpeedUnit,
    int? forecastDays,
    int? forecastHours,
    List<String>? current,
    List<String>? hourly,
    List<String>? daily,
    String? timezone,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getForecast,
          [],
          {
            #latitude: latitude,
            #longitude: longitude,
            #temperatureUnit: temperatureUnit,
            #windSpeedUnit: windSpeedUnit,
            #forecastDays: forecastDays,
            #forecastHours: forecastHours,
            #current: current,
            #hourly: hourly,
            #daily: daily,
            #timezone: timezone,
          },
        ),
        returnValue: _i5.Future<_i3.Forecast>.value(_FakeForecast_1(
          this,
          Invocation.method(
            #getForecast,
            [],
            {
              #latitude: latitude,
              #longitude: longitude,
              #temperatureUnit: temperatureUnit,
              #windSpeedUnit: windSpeedUnit,
              #forecastDays: forecastDays,
              #forecastHours: forecastHours,
              #current: current,
              #hourly: hourly,
              #daily: daily,
              #timezone: timezone,
            },
          ),
        )),
      ) as _i5.Future<_i3.Forecast>);
}
